#!/bin/bash
#SBATCH -n 1
#SBATCH --time 24:0:0


HERE=$1
GENE=$2

REFS=/softs/references/Homo_sapiens.T2T
STR_PIPELINE=/home/boelle/STR/PIPELINE

LOG=$HERE/repeat_sequences_from_each_read_$GENE.log

if [ $1 = "-h" ]
then
    echo "repeat_sequence_from_each_read.job HERE GENE"
    echo -e "\toutput reads supporting each allele, region matching the repeat, quality over the matching (mean/min/max), matching length and repeat)"
    echo -e "\tall reads are in a single .fastq with coment in name HAP1/HAP2/OUTLIER"
    echo -e "\tuses reads in fasta files from charONT overlap_GENE.gz_reads_allele_[1|2].fasta and overlap_GENE.gz_reads_outliers.fastq"
    echo -e "\taligns with flanking sequences found in ${STR_PIPELINE}/GENE/flank-SIDE-SIZE_rev.fa"
    echo -e "\tloops over flanking length 20/25/30"
    echo -e "\t(may require some work to compute actual number of repeats)"
    echo -e "\tThen does the same with ALL reads (initial fastq file) - irrespective of use in alleles"
    echo -e "\tThen runs straglr on overlap_GENE.bam"
    echo -e "\tFinds variants in the region and parts reads according to variants"
    exit
fi

RACINE=overlap_$GENE
CHARONTsubDIR=$HERE/$GENE/overlap_$GENE
GENEDIR=$HERE/$GENE/

if [ ! -d $GENEDIR/seq_$GENE ]
then
    mkdir $GENEDIR/seq_$GENE
else
    rm $GENEDIR/seq_$GENE/*
fi

SEQDIR=$GENEDIR/seq_$GENE

module load seqtk
module load emboss

cd $SEQDIR
echo "moved to $SEQDIR">$LOG
echo "moved to $SEQDIR"

#RACINE is overlap_GENE
echo "copying $RACINE.fasta to $SEQDIR">>$LOG
echo "copying $RACINE.fasta to $SEQDIR"
cp $GENEDIR/$RACINE.fasta $SEQDIR/overlap_${GENE}_reads_all.fasta
echo "copying $RACINE.fastq to $HERE/seq_$GENE">>$LOG
echo "copying $RACINE.fastq to $HERE/seq_$GENE"
cp $GENEDIR/$RACINE.fastq $SEQDIR/overlap_${GENE}_reads_all.fastq

# copy from CHarONT subdir
for ALLELE in allele_1 allele_2
do
    if [ -f $CHARONTsubDIR/overlap_${GENE}_reads_outliers.fasta ]
    then
	echo "copying $CHARONTsubDIR/overlap_${GENE}_reads_outliers.fasta to $SEQDIR"
	echo "copying $CHARONTsubDIR/overlap_${GENE}_reads_outliers.fasta to $SEQDIR" >>$LOG
	cp $CHARONTsubDIR/overlap_${GENE}_reads_outliers.fasta  $SEQDIR
    fi
done

#retranscribe fastq to fasta
if [ -f $CHARONTsubDIR/overlap_${GENE}_reads_outliers.fastq ]
then
    echo "seqtking $CHARONTsubDIR/overlap_${GENE}_reads_outliers.fasta to $SEQDIR/overlap_${GENE}_reads_outliers.fasta"
    echo "seqtking $CHARONTsubDIR/overlap_${GENE}_reads_outliers.fasta to $SEQDIR/overlap_${GENE}_reads_outliers.fasta"
    seqtk seq -A $CHARONTsubDIR/overlap_${GENE}_reads_outliers.fastq > $SEQDIR/overlap_${GENE}_reads_outliers.fasta
fi

for SIZE in 30 40 50 60 80 100
do
    echo "processing size $SIZE..."
    #    for ALLELE in allele_1 allele_2 outliers all
    for ALLELE in all
    do
	if [ ! -f $SEQDIR/overlap_${GENE}_reads_${ALLELE}.fasta ]
	then
	    echo "overlap_${GENE}_reads_allele_${ALLELE}.fasta not found in `pwd`" >>$LOG
	else
	    echo "using file overlap_${GENE}_reads_${ALLELE}.fasta" >> $LOG
	    echo "processing Allele $ALLELE..." >>$LOG
	    for SIDE in left right
	    do
	    #we get the local alignment and measure : score length (lenlocalg) identity gaps
		echo "water -gapopen 10 -gapextend 1 -outfile stdout ${STR_PIPELINE}/${GENE}/flank-${SIDE}-${SIZE}_rev.fa overlap_${GENE}_reads_${ALLELE}.fasta -aformat simple -awidth 200 -stdout" >> $LOG
		water -gapopen 10 -gapextend 1 -outfile stdout ${STR_PIPELINE}/${GENE}/flank-${SIDE}-${SIZE}_rev.fa overlap_${GENE}_reads_${ALLELE}.fasta -aformat simple -awidth 200 -stdout | tr '/' ' ' | awk -v side=$SIDE '{if ($0=="") {} else if ($2=="Score:") {score=$3;} else if ($2=="Length:") {lenlocalg=$3;} else if ($2=="Identity:") {identity=$3;} else if ($2=="Gaps:") {gaps=$3;} else if ($2=="1:") {flank=$3;} else if ($2=="2:") {read=$3;} else if (substr($1,1,12)==substr(flank,1,12)) {startflk=$2;endflk=$4;} else if (substr($1,1,12)==substr(read,1,12)) {print "@"read" "$2" "$4" "score" "lenlocalg" "identity" "gaps" "startflk" "endflk}}' | grep -v -e "^@ " | sort -k1 > overlap_${GENE}_${ALLELE}_${SIDE}${SIZE}.pos
	    # on met le nom de read avec @ car on va chercher dans fastq et la position de l'alignement
	    #we have read(1) / start(2) / end(3) / score (4) /lenalg (5) /identity(6) /gap (7) /startflk (8) / endflk (9)
		echo "... aligned with flank-$SIDE-${SIZE}_ref.fa" >> $LOG
	    done
	    # maintenant on repart dans le fichier fastq et on excise
	    # joint file with positions
	    #there are 9 columns in each file - read pos1 pos2  score length identity gaps startflk endflk
	    join overlap_${GENE}_${ALLELE}_right${SIZE}.pos overlap_${GENE}_${ALLELE}_left${SIZE}.pos > overlap_${GENE}_${ALLELE}_${SIZE}.pos
	    #	rm -f overlap_${GENE}_${ALLELE}_left${SIZE}.pos overlap_${GENE}_${ALLELE}_right${SIZE}.pos
	    # now there are pos, score, length, identity, gaps in the pos files so positions are :
	    # $1 : read
	    # (right) : pos1 $2 | pos2 $3 | score $4 | len $5 | identity $6 | gaps $7 | startflk $8 | endflk $9
	    # (left) : pos1 $10 | pos2 $11 | score $12 | len $13 | identity $14 | gaps $15 | startflk $16 | endflk $17
	    # make the fastq file
	    echo "processing all overlaping" >> $LOG
	# displays for each read
	# if there is a repeat region (leftend < rightstart)
	# we take the part including flanking (leftstart to rightend)
	    awk -v size="$SIZE" -v allele="$ALLELE" 'BEGIN{for(n=21;n<256;n++)ord[sprintf("%c",n)]=n-33}NR==FNR{read[$1]=$1;leftstart[$1]=$2;leftend[$1]=$3;qleft[$1]=$4;lenalgleft[$1]=$5;idleft[$1]=$6;gapleft[$1]=$7;fleftstart[$1]=$8;fleftend[$1]=$9;rightstart[$1]=$10;rightend[$1]=$11;qright[$1]=$12;lenalgright[$1]=$13;idright[$1]=$14;gapright[$1]=$15;frightstart[$1]=$16;frightend[$1]=$17;next;}{if (FNR % 4 == 1) {read2=$1;} else if (FNR % 4 == 2) {if (leftend[read2]<rightstart[read2]){replen=rightend[read2]-leftstart[read2]+1;seq=substr($1,leftstart[read2],replen);}else{seq="";replen=0;}}else if (FNR % 4 == 0) {if (leftend[read2]< rightstart[read2]) {qual=substr($1,leftstart[read2],rightend[read2]-leftstart[read2]+1);} else {qual="";}meanqual=0; leftqual=0; rightqual=0; minqual=256-21;maxqual=0;for(n=leftstart[read2];n<=leftend[read2];n++){pos=substr($1,n,1);leftqual=leftqual+exp(-ord[pos]*log(10)/10);}for (n=rightstart[read2];n<=rightend[read2];n++) {pos=substr($1,n,1);rightqual=rightqual+exp(-ord[pos]*log(10)/10);}if(rightstart[read2]>leftend[read2]){for(n=leftend[read2]+1;n<rightstart[read2];n++){pos=substr($1,n,1);meanqual=meanqual+exp(-ord[pos]*log(10)/10);if(minqual>ord[pos])minqual=ord[pos];if(maxqual<ord[pos])maxqual=ord[pos];}}else{meanqual=0;minqual=0;maxqual=0;} if (leftend[read2]<rightstart[read2]) {meanqual=-10*log(meanqual/(rightstart[read2]-leftend[read2]-1))/log(10);} else {meanqual=0;}rightqual=-10*log(rightqual/(rightend[read2]-rightstart[read2]+1))/log(10);leftqual=-10*log(leftqual/(leftend[read2]-leftstart[read2]+1))/log(10); if (length(seq)>0) {proper="READ-MATCH";} else {proper="READ-NO-MATCH";} print read2" ( "proper" allele: "allele" avgQ: "meanqual" minQ: "minqual" maxQ: "maxqual" leftQ: "leftqual" rightQ:"rightqual" P: "leftend[read2],1" "rightstart[read2]-1" L: "rightstart[read2]-leftend[read2]-1" S: "qleft[read2]" "qright[read2]" A: "lenalgleft[read2]" "lenalgright[read2]" Id: "idleft[read2]" "idright[read2]" G: "gapleft[read2]" "gapright[read2]" T: "length($1)" F: "fleftend[read2]" "frightstart[read2]" )\n"seq"\n+\n"qual}}' overlap_${GENE}_${ALLELE}_${SIZE}.pos overlap_${GENE}_reads_${ALLELE}.fastq > overlap_${GENE}_${ALLELE}_$SIZE.fastq


	    echo "processing proper overlaping" >> $LOG

	    echo "wrote overlap_${GENE}_${ALLELE}_$SIZE.fastq">>$LOG
	    READBEFORE=`wc -l overlap_${GENE}_reads_${ALLELE}.fastq | awk '{print $1}'`
	    READBEFORE=$(($READBEFORE/4))
	    READAFTER=`wc -l overlap_${GENE}_${ALLELE}_$SIZE.fastq | awk '{print $1}'`
	    READAFTER=$(($READAFTER/4))
	    READREMOVED=$(($READBEFORE-$READAFTER))
	    echo "INIT: $READBEFORE AFTER: $READAFTER REMOVED: $READREMOVED" >>$LOG
	    grep -e "allele" overlap_${GENE}_${ALLELE}_$SIZE.fastq > overlap_${GENE}_${ALLELE}_$SIZE.summary
	fi
    done
    if [ -f overlap_${GENE}_allele_1_$SIZE.fastq ]
    then
	cat overlap_${GENE}_allele_1_$SIZE.fastq overlap_${GENE}_allele_2_$SIZE.fastq overlap_${GENE}_outliers_$SIZE.fastq > $GENEDIR/overlap_${GENE}_$SIZE.fastq
	echo "writing final fastq">>$LOG
	rm overlap_${GENE}_allele_1_$SIZE.fastq overlap_${GENE}_allele_2_$SIZE.fastq overlap_${GENE}_outliers_$SIZE.fastq
	cat overlap_${GENE}_allele_1_$SIZE.summary overlap_${GENE}_allele_2_$SIZE.summary overlap_${GENE}_outliers_$SIZE.summary > $GENEDIR/overlap_${GENE}_$SIZE.summary
    fi
    cp  overlap_${GENE}_all_$SIZE.summary $GENEDIR
    cp  overlap_${GENE}_all_${SIZE}.fastq $GENEDIR
    if [ -f overlap_${GENE}_allele_1_$SIZE.summary ]
    then 
	rm overlap_${GENE}_allele_1_$SIZE.summary overlap_${GENE}_allele_2_$SIZE.summary overlap_${GENE}_outliers_$SIZE.summary
    fi
    
    for SIDE in left right
    do
	#do the same with unmatched reads
	water -gapopen 10 -gapextend 1 -outfile stdout ${STR_PIPELINE}/${GENE}/flank-${SIDE}-${SIZE}_rev.fa $GENEDIR/overlap_${GENE}_unmatched.fasta -aformat simple -awidth 200 -stdout | tr '/' ' ' | awk -v side=$SIDE '{if ($0=="") {} else if ($2=="Score:") {score=$3;} else if ($2=="Length:") {lenlocalg=$3;} else if ($2=="Identity:") {identity=$3;} else if ($2=="Gaps:") {gaps=$3;} else if ($2=="1:") {flank=$3} else if ($2=="2:") {read=$3;} else if (substr($1,1,12)==substr(flank,1,12)) {flkstart=$2;flkend=$4;} else if (substr($1,1,12)==substr(read,1,12)) {print "@"read" "$2" "$4" "score" "lenlocalg" "identity" "gaps" "flkstart" "flkend}}' | grep -v -e "^@ " | sort -k1 > $GENEDIR/overlap_${GENE}_unmatched_${SIDE}${SIZE}.pos
    done 
    # now extract sequences from fasta file, side by side
    awk -v size="$SIZE" -v side="$SIDE" 'BEGIN{for(n=21;n<256;n++)ord[sprintf("%c",n)]=n-33}NR==FNR{read[$1]=$1;leftstart[$1]=$2;leftend[$1]=$3;qleft[$1]=$4;lenalgleft[$1]=$5;idleft[$1]=$6;gapleft[$1]=$7;flkstart[$1]=$8;flkend[$1]=$9;next}{if (FNR % 4 == 1) {read2=$1;} else if (FNR % 4 == 2) {seq=substr($1,leftstart[read2],length($1)-leftstart[read2]);} else if (FNR % 4 == 0) {qual=substr($1,leftstart[read2],length($1)-leftstart[read2]); meanqual=0; leftqual=0; minqual=256-21;maxqual=0;for(n=1;n<leftend[read2]-leftstart[read2];n++){pos=substr(qual,n,1);leftqual=leftqual+exp(-ord[pos]*log(10)/10);}for(n=leftend[read2]-leftstart[read2];n<length(qual);n++){pos=substr(qual,n,1);meanqual=meanqual+exp(-ord[pos]*log(10)/10);if(minqual>ord[pos])minqual=ord[pos];if(maxqual<ord[pos])maxqual=ord[pos];}meanqual=-10*log(meanqual/(0.1+length($1)-leftend[read2]))/log(10);leftqual=-10*log(leftqual/(0.1+leftend[read2]-leftstart[read2]))/log(10); if (length(seq)>0) {proper="LEFT-MATCH";} else {proper="READ-NO-MATCH";} print read2" ( "proper" allele: "allele" avgQ: "meanqual" minQ: "minqual" maxQ: "maxqual" leftQ: "leftqual" rightQ: NA P: "leftend[read2]" "length($1)" L: "length($1)-leftend[read2]" S: "qleft[read2]" NA A: "lenalgleft[read2]" NA Id: "idleft[read2]" NA G: "gapleft[read2]" NA T: "length($1)" F: "flkend[read2]" NA )\n"seq"\n+\n"qual}}' $GENEDIR/overlap_${GENE}_unmatched_left${SIZE}.pos $GENEDIR/overlap_${GENE}_unmatched.fastq > $GENEDIR/overlap_${GENE}_unmatched_left_$SIZE.fastq
    
    awk -v size="$SIZE" -v side="$SIDE" 'BEGIN{for(n=21;n<256;n++)ord[sprintf("%c",n)]=n-33}NR==FNR{read[$1]=$1;rightstart[$1]=$2;rightend[$1]=$3;qright[$1]=$4;lenalgright[$1]=$5;idright[$1]=$6;gapright[$1]=$7;flkstart[$1]=$8;flkend[$1]=$9;next}{if (FNR % 4 == 1) {read2=$1;} else if (FNR % 4 == 2) {seq=substr($1,1,rightend[read2]);} else if (FNR % 4 == 0) {qual=substr($1,1,rightend[read2]); meanqual=0; rightqual=0; minqual=256-21;maxqual=0;for (n=rightstart[read2];n<rightend[read2];n++) {pos=substr($1,n,1);rightqual=rightqual+exp(-ord[pos]*log(10)/10);}for(n=1;n<rightstart[read2];n++){pos=substr($1,n,1);meanqual=meanqual+exp(-ord[pos]*log(10)/10);if(minqual>ord[pos])minqual=ord[pos];if(maxqual<ord[pos])maxqual=ord[pos];} meanqual=-10*log(meanqual/(0.1+rightstart[read2]))/log(10);rightqual=-10*log(rightqual/(0.1+rightend[read2]-rightstart[read2]))/log(10);if (length(seq)>0) {proper="RIGHT-MATCH";} else {proper="READ-NO-MATCH";} print read2" ( "proper" allele: "allele" avgQ: "meanqual" minQ: "minqual" maxQ: "maxqual" leftQ: NA rightQ: "rightqual" L: "rightstart[read2]" S: NA "qright[read2]" A: NA "lenalgright[read2]" Id: NA "idright[read2]" G: NA "gapright[read2]" T: "length($1)" F: NA "flkstart[read2]")\n"seq"\n+\n"qual}}' $GENEDIR/overlap_${GENE}_unmatched_right${SIZE}.pos $GENEDIR/overlap_${GENE}_unmatched.fastq > $GENEDIR/overlap_${GENE}_unmatched_right_$SIZE.fastq

done

module unload seqtk
module unload emboss

# run STRAGLR
#module load trf
#module load straglr

#straglr-genotype --loci $REFS/clinical-repeats.bed --sample overlap_$GENE --vcf $HERE/$GENE/reads_repeat_overlap_$GENE.vcf --tsv $HERE/$GENE/reads_repeat_overlap_$GENE.tsv  --sex male $HERE/OVERLAPS/overlap_$GENE.bam $REFS/chm13v2.0.fa  --min_support 1 --min_cluster_size 1

#module unload straglr
#module unload trf


