#!/bin/bash
#SBATCH -n 1


module load charONT

HERE=$1
GENE=$2
REPEATLENGTH=$3

REFS=/softs/references/Homo_sapiens.T2T
STR_PIPELINE=/scratch/ONT/STR

LOG=$HERE/repeat_sequences_from_each_read_$GENE.log

if [ $1 = "-h" ]
then
    echo "repeat_sequence_from_each_read.job HERE GENE REPEATLENGTH"
    echo -e "\toutput reads supporting each allele, region matching the repeat, quality over the matching (mean/min/max), matching length and and number of repeats (size/REPEATLENGTH)"
    echo -e "\tall reads are in a single .fastq with coment in name HAP1/HAP2/OUTLIER"
    echo -e "\tuses reads in fasta files from charONT overlap_GENE.gz_reads_allele_[1|2].fasta and overlap_GENE.gz_reads_outliers.fastq"
    echo -e "\taligns with flanking sequences found in ${STR_PIPELINE}/GENE/flank-SIDE-SIZE_rev.fa"
    echo -e "\tloops over flanking length 20/25/30"
    echo -e "\t(may require some work to compute actual number of repeats)"
    echo -e "\tThen does the same with ALL reads (initial fastq file) - irrespective of use in alleles"
    echo -e "\tThen runs straglr on overlap_GENE.bam"    
    exit
fi


RACINE=overlap_$GENE
CHARONTsubDIR=$HERE/$GENE/overlap_$GENE
CHARONTDIR=$HERE/$GENE/


module load seqtk

cd $CHARONTsubDIR
echo "moved to $CHARONTsubDIR">>$LOG
echo "moved to $CHARONTsubDIR"

#RACINE is overlap_GENE
echo "copying $RACINE.fasta to $CHARONTsubDIR">>$LOG
cp $CHARONTDIR/$RACINE.fasta $CHARONTsubDIR/overlap_${GENE}_reads_all.fasta
echo "copying $RACINE.fastq to $CHARONTsubDIR">>$LOG
cp $CHARONTDIR/$RACINE.fastq $CHARONTsubDIR/overlap_${GENE}_reads_all.fastq

#retranscribe fastq to fasta 
seqtk seq -A $CHARONTsubDIR/overlap_${GENE}_reads_outliers.fastq > $CHARONTsubDIR/overlap_${GENE}_reads_outliers.fasta

for SIZE in 30 40 50 60 80 100
do
    	echo "processing size $SIZE..."
    for ALLELE in allele_1 allele_2 outliers all
    do
	if [ -f $CHARONTsubDIR/overlap_${GENE}_reads_${ALLELE}.fasta ]
	then
	    echo "using file overlap_${GENE}_reads_${ALLELE}.fasta" >> $LOG
	else
	    echo "overlap_${GENE}_reads_allele_${ALLELE}.fasta not found in `pwd`" >>$LOG
	fi
	echo "processing Allele $ALLELE..." >>$LOG
	for SIDE in left right
	do
	    #we get the local alignment and measure : score length (lenlocalg) identity gaps
	    echo "water -gapopen 10 -gapextend 1 -outfile stdout ${STR_PIPELINE}/${GENE}/flank-${SIDE}-${SIZE}_rev.fa overlap_${GENE}_reads_${ALLELE}.fasta -aformat simple -stdout" >> $LOG
	    water -gapopen 10 -gapextend 1 -outfile stdout ${STR_PIPELINE}/${GENE}/flank-${SIDE}-${SIZE}_rev.fa overlap_${GENE}_reads_${ALLELE}.fasta -aformat simple -awidth 200 -stdout | tr '/' ' ' | awk -v side=$SIDE '{if ($0=="") {} else if ($2=="Score:") {score=$3} else if ($2=="Length:") {lenlocalg=$3} else if ($2=="Identity:") {identity=$3} else if ($2=="Gaps:") {gaps=$3} else if ($2=="2:") {read=$3} else if (substr($1,1,12)==substr(read,1,12)) {if (side=="right") {print "@"read" "$4" "score" "lenlocalg" "identity" "gaps} else if (side=="left") {print "@"read" "$2" "score" "lenlocalg" "identity" "gaps}}}' | grep -v -e "^@ " | sort -k1 > overlap_${GENE}_${ALLELE}_${SIDE}${SIZE}.pos
	    #		grep -e "# 2:" -e "\.\." | tr  '.' ' ' | awk -v side=$SIDE '{if (NR % 2==1) {read=$3} else {if (side=="right") {print "@"read" "$9} else if (side=="left") {print "@"read" "$8}}}' > 		
	    # on met le nom de read avec @ car on va chercher dans fastq et la position de l'alignement
	    echo "... aligned with flank-$SIDE-${SIZE}_ref.fa" >> $LOG
	done
    # maintenant on repart dans le fichier fastq et on excise
	# joint file with positions
	#there are 6 columns in each file - read pos score length identity gaps
	join overlap_${GENE}_${ALLELE}_right${SIZE}.pos overlap_${GENE}_${ALLELE}_left${SIZE}.pos > overlap_${GENE}_${ALLELE}_${SIZE}.pos
#	rm -f overlap_${GENE}_${ALLELE}_left${SIZE}.pos overlap_${GENE}_${ALLELE}_right${SIZE}.pos
	# now there are pos, score, length, identity, gaps in the pos files so positions are :
	# $1 : read
	# (right) : pos $2 | score $3 | len $4 | identity $5 | gaps $6 
	# (left) : pos $7 | score $8 | len $9 | identity $10 | gaps $11 
	# make the fastq file
	echo "processing all overlaping" >> $LOG
	# displays for each read 
	awk -v size="$SIZE" -v rl="$REPEATLENGTH" -v allele="$ALLELE" 'BEGIN{for(n=21;n<256;n++)ord[sprintf("%c",n)]=n-33}NR==FNR{read[$1]=$1;left[$1]=$2-size;qleft[$1]=$3;lenalgleft[$1]=$4;idleft[$1]=$5;gapleft[$1]=$6;right[$1]=$7+size;qright[$1]=$8;lenalgright[$1]=$9;idright[$1]=$10;gapright[$1]=$11;next}{if (FNR % 4 == 1) {read2=$1} else if (FNR % 4 == 2) {seq=substr($1,left[read2],right[read2]-left[read2])} else if (FNR % 4 == 0) {qual=substr($1,left[read2],right[read2]-left[read2]); meanqual=0; leftqual=0; rightqual=0; minqual=256-21;maxqual=0;for(n=0;n<size;n++){pos=substr(qual,n,1);leftqual=leftqual+exp(-ord[pos]*log(10)/10);pos=substr(qual,length(qual)-n+1,1);rightqual=rightqual+exp(-ord[pos]*log(10)/10);}for(n=size;n<length(qual)-size;n++){pos=substr(qual,n,1);meanqual=meanqual+exp(-ord[pos]*log(10)/10);if(minqual>ord[pos])minqual=ord[pos];if(maxqual<ord[pos])maxqual=ord[pos];} meanqual=-10*log(meanqual/(1+length(qual)-2*size))/log(10);rightqual=-10*log(rightqual/size)/log(10);leftqual=-10*log(leftqual/size)/log(10); if (length(seq)>0) {proper="READ-MATCH"} else {proper="READ-NO-MATCH"}; print read2" ( "proper" allele: "allele" avgQ: "meanqual" minQ: "minqual" maxQ: "maxqual" leftQ: "leftqual" rightQ: "rightqual" L: "length(qual)-2*size" N: "(length(qual)-2*size)/rl" S: "qleft[read2]" "qright[read2]" A: "lenalgleft[read2]" "lenalgright[read2]" Id: "idleft[read2]" "idright[read2]" G: "gapleft[read2]" "gapright[read2]" )\n"seq"\n+\n"qual}}' overlap_${GENE}_${ALLELE}_${SIZE}.pos overlap_${GENE}_reads_${ALLELE}.fastq > overlap_${GENE}_${ALLELE}_$SIZE.fastq
	echo "processing proper overlaping" >> $LOG
	# we output only if identity/length larger than 75%
	awk -v size="$SIZE" -v rl="$REPEATLENGTH" -v allele="$ALLELE" 'BEGIN{for(n=21;n<256;n++)ord[sprintf("%c",n)]=n-33}NR==FNR{read[$1]=$1;left[$1]=$2-size;qleft[$1]=$3;lenalgleft[$1]=$4;idleft[$1]=$5;gapleft[$1]=$6;right[$1]=$7+size;qright[$1]=$8;lenalgright[$1]=$9;idright[$1]=$10;gapright[$1]=$11;next}{if (FNR % 4 == 1) {read2=$1} else if (FNR % 4 == 2) {seq=substr($1,left[read2],right[read2]-left[read2])} else if (FNR % 4 == 0) {qual=substr($1,left[read2],right[read2]-left[read2]); meanqual=0;minqual=256-21;maxqual=0;for(n=0;n<length(qual);n++){pos=substr(qual,n,1);meanqual=meanqual+exp(-ord[pos]*log(10)/10);if(minqual>ord[pos])minqual=ord[pos];if(maxqual<ord[pos])maxqual=ord[pos];} meanqual=-10*log(meanqual/(1+length(qual)))/log(10); if (length(seq)>0 && idleft[read2]>0.75*lenalgleft[read2] && idright[read2]>0.75*lenalgright[read2] ) {print read2" ( allele: "allele" avgQ: "meanqual" minQ: "minqual" maxQ: "maxqual" L: "length(qual)-2*size" N: "(length(qual)-2*size)/rl" S: "qleft[read2]" "qright[read2]" A: "lenalgleft[read2]" "lenalgright[read2]" Id: "idleft[read2]" "idright[read2]" G: "gapleft[read2]" "gapright[read2]" )\n"seq"\n+\n"qual}}}' overlap_${GENE}_${ALLELE}_${SIZE}.pos overlap_${GENE}_reads_${ALLELE}.fastq > overlap_${GENE}_${ALLELE}_${SIZE}_proper.fastq
	echo "processing proper overlaping - output left"	
	awk -v size="$SIZE" -v rl="$REPEATLENGTH" -v allele="$ALLELE" 'BEGIN{for(n=21;n<256;n++)ord[sprintf("%c",n)]=n-33}NR==FNR{read[$1]=$1;left[$1]=$2-size;qleft[$1]=$3;lenalgleft[$1]=$4;idleft[$1]=$5;gapleft[$1]=$6;right[$1]=$7+size;qright[$1]=$8;lenalgright[$1]=$9;idright[$1]=$10;gapright[$1]=$11;next}{if (FNR % 4 == 1) {read2=$1} else if (FNR % 4 == 2) {seq=substr($1,left[read2],right[read2]-left[read2])} else if (FNR % 4 == 0) {qual=substr($1,left[read2],right[read2]-left[read2]); meanqual=0;minqual=256-21;maxqual=0;for(n=0;n<length(qual);n++){pos=substr(qual,n,1);meanqual=meanqual+exp(-ord[pos]*log(10)/10);if(minqual>ord[pos])minqual=ord[pos];if(maxqual<ord[pos])maxqual=ord[pos];} meanqual=-10*log(meanqual/(1+length(qual)))/log(10); if (length(seq)>0 && idleft[read2]>0.75*lenalgleft[read2] ) {print read2" ( allele: "allele" avgQ: "meanqual" minQ: "minqual" maxQ: "maxqual" L: "length(qual)-2*size" N: "(length(qual)-2*size)/rl" S: "qleft[read2]" "qright[read2]" A: "lenalgleft[read2]" "lenalgright[read2]" Id: "idleft[read2]" "idright[read2]" G: "gapleft[read2]" "gapright[read2]" )\n"substr(seq,1,rl-size)"\n+\n"substr(qual,1,rl-size)}}}' overlap_${GENE}_${ALLELE}_${SIZE}.pos overlap_${GENE}_reads_${ALLELE}.fastq > overlap_${GENE}_${ALLELE}_${SIZE}_proper_left.fastq
	echo "wrote overlap_${GENE}_${ALLELE}_$SIZE.fastq">>$LOG
	READBEFORE=`wc -l overlap_${GENE}_reads_${ALLELE}.fastq | awk '{print $1}'`
	READBEFORE=$(($READBEFORE/4))
	READAFTER=`wc -l overlap_${GENE}_${ALLELE}_$SIZE.fastq | awk '{print $1}'`
	READAFTER=$(($READAFTER/4))
	READREMOVED=$(($READBEFORE-$READAFTER))
	echo "INIT: $READBEFORE AFTER: $READAFTER REMOVED: $READREMOVED" >>$LOG
	grep -e "allele" overlap_${GENE}_${ALLELE}_$SIZE.fastq > overlap_${GENE}_${ALLELE}_$SIZE.summary
	seqtk seq -a  overlap_${GENE}_${ALLELE}_${SIZE}_proper.fastq >  overlap_${GENE}_${ALLELE}_${SIZE}_proper.fasta
    done
    cat overlap_${GENE}_allele_1_$SIZE.fastq overlap_${GENE}_allele_2_$SIZE.fastq overlap_${GENE}_outliers_$SIZE.fastq > $CHARONTDIR/overlap_${GENE}_$SIZE.fastq
    echo "writing final fastq">>$LOG
    rm overlap_${GENE}_allele_1_$SIZE.fastq overlap_${GENE}_allele_2_$SIZE.fastq overlap_${GENE}_outliers_$SIZE.fastq
    cat overlap_${GENE}_allele_1_$SIZE.summary overlap_${GENE}_allele_2_$SIZE.summary overlap_${GENE}_outliers_$SIZE.summary > $CHARONTDIR/overlap_${GENE}_$SIZE.summary
    cp  overlap_${GENE}_all_$SIZE.summary $CHARONTDIR
    cp  overlap_${GENE}_all_${SIZE}.fastq $CHARONTDIR
    cp  overlap_${GENE}_all_${SIZE}_proper.fasta $CHARONTDIR
    rm overlap_${GENE}_allele_1_$SIZE.summary overlap_${GENE}_allele_2_$SIZE.summary overlap_${GENE}_outliers_$SIZE.summary
done


# do with custom_flanking regions
echo "processing custom "
for SIZE in 25 30 40 60
do
    if [ -f ${STR_PIPELINE}/${GENE}/flank-custom_right-${SIZE}_rev.fa ]
    then
	echo "processing custom flanks size $SIZE..."
	for ALLELE in allele_1 allele_2 outliers all
	do
	    if [ -f $CHARONTsubDIR/overlap_${GENE}_reads_${ALLELE}.fasta ]
	    then
		echo "using file overlap_${GENE}_reads_${ALLELE}.fasta"
	    else
		echo "overlap_${GENE}_reads_allele_${ALLELE}.fasta not found in `pwd`"
	    fi
	    echo "processing Allele $ALLELE..."
	    for SIDE in left right
	    do
		echo "water -gapopen 10 -gapextend 1 -outfile stdout ${STR_PIPELINE}/${GENE}/flank-${SIDE}-${SIZE}_rev.fa overlap_${GENE}_reads_${ALLELE}.fasta -aformat simple -stdout"
		water -gapopen 10 -gapextend 1 -outfile stdout ${STR_PIPELINE}/${GENE}/flank-custom_${SIDE}-${SIZE}_rev.fa overlap_${GENE}_reads_${ALLELE}.fasta -aformat simple -stdout | awk -v side=$SIDE '{if ($2=="Score:") {score=$3} else if ($2=="2:") {read=$3} else if (substr($1,1,12)==substr(read,1,12)) {if (side=="right") {print "@"read" "$4" "score} else if (side=="left") {print "@"read" "$2" "score}}}' | grep -v -e "^@ " > overlap_${GENE}_${ALLELE}_custom_${SIDE}${SIZE}.pos
#		grep -e "# 2:" -e "\.\." | tr  '.' ' ' | awk -v side=$SIDE '{if (NR % 2==1) {read=$3} else {if (side=="right") {print "@"read" "$9} else if (side=="left") {print "@"read" "$8}}}' > 		
	    # on met le nom de read avec @ car on va chercher dans fastq et la position de l'alignement
		echo "... aligned with flank-$SIDE-${SIZE}_ref.fa"
	    done
    # maintenant on repart dans le fichier fastq et on excise
    # joint file with positions
	    join overlap_${GENE}_${ALLELE}_custom_right${SIZE}.pos overlap_${GENE}_${ALLELE}_custom_left${SIZE}.pos > overlap_${GENE}_${ALLELE}_custom_${SIZE}.pos
#	    rm -f overlap_${GENE}_${ALLELE}_custom_left${SIZE}.pos overlap_${GENE}_${ALLELE}_custom_right${SIZE}.pos
	    # now there are score in the pos files so position are $2 and $4
	    # make the fastq file
	    awk -v size="$SIZE" -v rl="$REPEATLENGTH" -v allele="$ALLELE" 'BEGIN{for(n=21;n<256;n++)ord[sprintf("%c",n)]=n-33}NR==FNR{read[$1]=$1;left[$1]=$2-size;qleft[$1]=$3;right[$1]=$4+size;qright[$1]=$5;next}{if (FNR % 4 == 1) {read2=$1} else if (FNR % 4 == 2) {seq=substr($1,left[read2],right[read2]-left[read2])} else if (FNR % 4 == 0) {qual=substr($1,left[read2],right[read2]-left[read2]); meanqual=0;minqual=256-21;maxqual=0;for(n=0;n<length(qual);n++){pos=substr(qual,n,1);meanqual=meanqual+exp(-ord[pos]*log(10)/10);if(minqual>ord[pos])minqual=ord[pos];if(maxqual<ord[pos])maxqual=ord[pos];} meanqual=-10*log(meanqual/(1+length(qual)))/log(10); if (length(seq)>0) {print read2" ( allele: "allele" avgQ: "meanqual" minQ: "minqual" maxQ: "maxqual" L: "length(qual)-2*size" N: "(length(qual)-2*size)/rl" S: "qleft[read2]" "qright[read2]" )\n"seq"\n+\n"qual}}}' overlap_${GENE}_${ALLELE}_custom_${SIZE}.pos overlap_${GENE}_reads_${ALLELE}.fastq > overlap_${GENE}_${ALLELE}_custom_$SIZE.fastq
	    echo "wrote overlap_${GENE}_${ALLELE}_$SIZE.fastq"
	    READBEFORE=`wc -l overlap_${GENE}_reads_${ALLELE}.fastq | awk '{print $1}'`
	    READBEFORE=$(($READBEFORE/4))
	    READAFTER=`wc -l overlap_${GENE}_${ALLELE}_custom_$SIZE.fastq | awk '{print $1}'`
	    READAFTER=$(($READAFTER/4))
	    READREMOVED=$(($READBEFORE-$READAFTER))
	    echo "INIT: $READBEFORE AFTER: $READAFTER REMOVED: $READREMOVED"
	    grep -e "allele" overlap_${GENE}_${ALLELE}_custom_$SIZE.fastq > overlap_${GENE}_${ALLELE}_custom_$SIZE.summary
	done
	cat overlap_${GENE}_allele_1_custom_$SIZE.fastq overlap_${GENE}_allele_2_custom_$SIZE.fastq overlap_${GENE}_outliers_custom_$SIZE.fastq > $CHARONTDIR/overlap_${GENE}_custom_$SIZE.fastq
	echo "writing final custom fastq"
#	rm overlap_${GENE}_allele_1_custom_$SIZE.fastq overlap_${GENE}_allele_2_custom_$SIZE.fastq overlap_${GENE}_outliers_custom_$SIZE.fastq
	cat overlap_${GENE}_allele_1_custom_$SIZE.summary overlap_${GENE}_allele_2_custom_$SIZE.summary overlap_${GENE}_outliers_custom_$SIZE.summary > $CHARONTDIR/overlap_${GENE}_custom_$SIZE.summary
	cp  overlap_${GENE}_all_custom_$SIZE.summary $CHARONTDIR
#	rm overlap_${GENE}_allele_1_custom_$SIZE.summary overlap_${GENE}_allele_2_custom_$SIZE.summary overlap_${GENE}_outliers_custom_$SIZE.summary
    fi
done

# run STRAGLR
module load straglr
module load trf

straglr-genotype --loci $REFS/clinical-repeats.bed --sample overlap_$GENE --vcf $HERE/$GENE/reads_repeat_overlap_$GENE.vcf --tsv $HERE/$GENE/reads_repeat_overlap_$GENE.tsv  --sex male $HERE/OVERLAPS/overlap_$GENE.bam $REFS/chm13v2.0.fa  --min_support 1 --min_cluster_size 1

module unload trf
module unload straglr
